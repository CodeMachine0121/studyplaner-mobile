import 'dart:io' as io;
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:webview_flutter/webview_flutter.dart';
// Import platform-specific implementations
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize WebView if on mobile platforms and not on web
  if (!kIsWeb && (io.Platform.isAndroid || io.Platform.isIOS)) {
    initWebViewPlatform();
  }
  runApp(const MyApp());
}

void initWebViewPlatform() {
  // Initialize WebView for the current platform
  if (WebViewPlatform.instance == null) {
    if (io.Platform.isAndroid) {
      WebViewPlatform.instance = AndroidWebViewPlatform();
    } else if (io.Platform.isIOS) {
      WebViewPlatform.instance = WebKitWebViewPlatform();
    }
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Study Planner',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: const WebViewPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class WebViewPage extends StatefulWidget {
  const WebViewPage({super.key});

  @override
  State<WebViewPage> createState() => _WebViewPageState();
}

class _WebViewPageState extends State<WebViewPage> {
  late final WebViewController? controller;
  bool isLoading = true;
  bool isMobileDevice = !kIsWeb && (io.Platform.isAndroid || io.Platform.isIOS);
  final String targetUrl = 'http://localhost:8080';
  
  // Footer navigation items
  List<BottomNavigationBarItem> _footerItems = [
    const BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
    const BottomNavigationBarItem(icon: Icon(Icons.calendar_today), label: 'Calendar'),
    const BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),
  ];

  @override
  void initState() {
    super.initState();
    
    if (isMobileDevice) {
      controller = WebViewController()
        ..setJavaScriptMode(JavaScriptMode.unrestricted)
        ..setBackgroundColor(const Color(0x00000000))
        // Set a desktop user agent to avoid mobile-specific UI elements
        ..setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
        ..setNavigationDelegate(
          NavigationDelegate(
            onProgress: (int progress) {
              if (progress == 100) {
                setState(() {
                  isLoading = false;
                });
              }
            },
            onPageStarted: (String url) {
              setState(() {
                isLoading = true;
              });
            },
            onPageFinished: (String url) {
              setState(() {
                isLoading = false;
              });
              
              // Inject JavaScript to detect and extract WebView's footer elements
              controller?.runJavaScript('''
                (function() {
                  function detectFooterItems() {
                    // Look for common footer navigation elements
                    const footerNavItems = [];
                    const footerElements = document.querySelectorAll('.footer a, .bottom-nav a, .navigation-bar a, [role="navigation"] a, nav a');
                    
                    footerElements.forEach(item => {
                      // Extract text and icon information
                      const text = item.textContent.trim();
                      const hasHomeIcon = item.querySelector('i.home, i.fa-home, .icon-home') || 
                                          item.innerHTML.includes('home') || 
                                          text.toLowerCase().includes('home');
                      const hasCalendarIcon = item.querySelector('i.calendar, i.fa-calendar, .icon-calendar') || 
                                              item.innerHTML.includes('calendar') || 
                                              text.toLowerCase().includes('calendar');
                      const hasSettingsIcon = item.querySelector('i.settings, i.fa-cog, .icon-settings') || 
                                              item.innerHTML.includes('settings') || 
                                              text.toLowerCase().includes('settings');
                      
                      // Add to our collection
                      if (hasHomeIcon || hasCalendarIcon || hasSettingsIcon || text) {
                        footerNavItems.push({
                          text: text,
                          isHome: hasHomeIcon,
                          isCalendar: hasCalendarIcon,
                          isSettings: hasSettingsIcon
                        });
                      }
                    });
                    
                    // Store the result in a global variable that we can access
                    window.detectedFooterItems = JSON.stringify(footerNavItems);
                    console.log('Detected footer items:', window.detectedFooterItems);
                  }
                  
                  // Run detection after page is fully loaded
                  setTimeout(detectFooterItems, 1000);
                  
                  // Also observe for changes
                  const observer = new MutationObserver((mutations) => {
                    setTimeout(detectFooterItems, 500);
                  });
                  
                  observer.observe(document.body, { childList: true, subtree: true });
                })();
              ''');
              
              // Set up a timer to periodically check for footer items
              Future.delayed(const Duration(seconds: 2), () {
                _checkForFooterItems();
              });
            },
            onWebResourceError: (WebResourceError error) {
              debugPrint('Web resource error: ${error.description}');
            },
          ),
        );
    } else {
      // For desktop platforms, we don't initialize the controller
      controller = null;
      // Set loading to false since we're not actually loading a WebView
      isLoading = false;
    }
  }
  
  // Periodically check for footer items detected by JavaScript
  void _checkForFooterItems() {
    if (controller != null && mounted) {
      controller!.runJavaScriptReturningResult('window.detectedFooterItems || "[]"')
          .then((result) {
        try {
          final String jsonData = result.toString();
          final List<dynamic> footerData = jsonDecode(jsonData);
          
          // Process footer items and update app's footer
          if (footerData.isNotEmpty) {
            _updateFooterItems(footerData);
          }
        } catch (e) {
          debugPrint('Error processing footer data: $e');
        }
        
        // Schedule next check if still mounted
        if (mounted) {
          Future.delayed(const Duration(seconds: 5), () {
            _checkForFooterItems();
          });
        }
      }).catchError((error) {
        debugPrint('Error getting footer items: $error');
        if (mounted) {
          Future.delayed(const Duration(seconds: 5), () {
            _checkForFooterItems();
          });
        }
      });
    }
  }
  
  // Update footer items based on detected items from WebView
  void _updateFooterItems(List<dynamic> footerData) {
    // Map of icons to use based on detected item types
    final Map<String, IconData> iconMap = {
      'home': Icons.home,
      'calendar': Icons.calendar_today,
      'settings': Icons.settings,
      'profile': Icons.person,
      'search': Icons.search,
      'menu': Icons.menu,
      'notifications': Icons.notifications,
      'messages': Icons.message,
    };
    
    // Create new footer items based on detected data
    List<BottomNavigationBarItem> newItems = [];
    
    for (var item in footerData) {
      String text = item['text'] ?? 'Item';
      IconData icon = Icons.circle;
      
      // Determine appropriate icon
      if (item['isHome'] == true) {
        icon = Icons.home;
      } else if (item['isCalendar'] == true) {
        icon = Icons.calendar_today;
      } else if (item['isSettings'] == true) {
        icon = Icons.settings;
      } else {
        // Try to match by text
        String lowerText = text.toLowerCase();
        for (var key in iconMap.keys) {
          if (lowerText.contains(key)) {
            icon = iconMap[key]!;
            break;
          }
        }
      }
      
      newItems.add(BottomNavigationBarItem(
        icon: Icon(icon),
        label: text,
      ));
    }
    
    // Only update if we found items and they're different from current ones
    if (newItems.isNotEmpty && newItems.length != _footerItems.length) {
      setState(() {
        _footerItems = newItems;
      });
    }
  }
        ..loadRequest(Uri.parse(targetUrl));
    } else {
      // For desktop platforms, we don't initialize the controller
      controller = null;
      // Set loading to false since we're not actually loading a WebView
      isLoading = false;
    }
  }

  // Current selected index for bottom navigation
  int _selectedIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Study Planner'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          if (isMobileDevice)
            IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: () {
                controller?.reload();
              },
            ),
        ],
      ),
      body: isMobileDevice ? _buildMobileView() : _buildDesktopView(),
      bottomNavigationBar: isMobileDevice ? _buildFooter(context) : null,
    );
  }

  // Update footer items based on detected items from WebView
  void _updateFooterItems(List<dynamic> footerData) {
    // Map of icons to use based on detected item types
    final Map<String, IconData> iconMap = {
      'home': Icons.home,
      'calendar': Icons.calendar_today,
      'settings': Icons.settings,
      'profile': Icons.person,
      'search': Icons.search,
      'menu': Icons.menu,
      'notifications': Icons.notifications,
      'messages': Icons.message,
    };
    
    // Create new footer items based on detected data
    List<BottomNavigationBarItem> newItems = [];
    
    for (var item in footerData) {
      String text = item['text'] ?? 'Item';
      IconData icon = Icons.circle;
      
      // Determine appropriate icon
      if (item['isHome'] == true) {
        icon = Icons.home;
      } else if (item['isCalendar'] == true) {
        icon = Icons.calendar_today;
      } else if (item['isSettings'] == true) {
        icon = Icons.settings;
      } else {
        // Try to match by text
        String lowerText = text.toLowerCase();
        for (var key in iconMap.keys) {
          if (lowerText.contains(key)) {
            icon = iconMap[key]!;
            break;
          }
        }
      }
      
      newItems.add(BottomNavigationBarItem(
        icon: Icon(icon),
        label: text,
      ));
    }
    
    // Only update if we found items and they're different from current ones
    if (newItems.isNotEmpty && newItems.length != _footerItems.length) {
      setState(() {
        _footerItems = newItems;
      });
    }
  }

  Widget _buildFooter(BuildContext context) {
    return BottomNavigationBar(
      currentIndex: _selectedIndex,
      onTap: (index) {
        setState(() {
          _selectedIndex = index;
        });
        // Execute JavaScript to interact with the WebView based on the selected tab
        if (controller != null && index < _footerItems.length) {
          // Get the label of the selected item
          String label = _footerItems[index].label?.toLowerCase() ?? '';
          
          // Create a JavaScript function call based on the label
          String functionName = 'goTo${label.substring(0, 1).toUpperCase()}${label.substring(1)}';
          controller!.runJavaScript("if(typeof $functionName === 'function') { $functionName(); } else { console.log('Function $functionName not found'); }");
          
          // Also try clicking the corresponding element in the WebView
          controller!.runJavaScript('''
            (function() {
              const footerLinks = document.querySelectorAll('.footer a, .bottom-nav a, .navigation-bar a, [role="navigation"] a, nav a');
              const targetIndex = $index;
              
              if (footerLinks.length > targetIndex) {
                footerLinks[targetIndex].click();
              }
            })();
          ''');
        }
      },
      items: _footerItems,
    );
  }

  Widget _buildMobileView() {
    return Stack(
      children: [
        if (controller != null) WebViewWidget(controller: controller!),
        if (isLoading)
          const Center(
            child: CircularProgressIndicator(),
          ),
      ],
    );
  }

  Widget _buildDesktopView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.desktop_mac, size: 80, color: Colors.grey),
          const SizedBox(height: 20),
          const Text(
            'WebView is not supported on this platform.',
            style: TextStyle(fontSize: 18),
          ),
          const SizedBox(height: 10),
          const Text(
            'Please use a mobile device or access directly in a browser:',
            style: TextStyle(fontSize: 16),
          ),
          const SizedBox(height: 20),
          Text(
            targetUrl,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 30),
          ElevatedButton(
            onPressed: () async {
              final Uri url = Uri.parse(targetUrl);
              if (await canLaunchUrl(url)) {
                await launchUrl(url);
              } else {
                debugPrint('Could not launch $url');
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Could not open $targetUrl')),
                  );
                }
              }
            },
            child: const Text('Open in Browser'),
          ),
        ],
      ),
    );
  }
}
